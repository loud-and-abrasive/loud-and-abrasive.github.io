<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.1">Jekyll</generator><link href="http://loudandabrasive.com/feed.xml" rel="self" type="application/atom+xml" /><link href="http://loudandabrasive.com/" rel="alternate" type="text/html" /><updated>2021-06-21T14:51:45+00:00</updated><id>http://loudandabrasive.com/feed.xml</id><title type="html">Loud &amp;amp; Abrasive: Patrick McVeety-Mill</title><subtitle>Patrick McVeety-Mill's blog and portfolio: Loud &amp; Abrasive. Featuring guides, art samples, and thoughts and commentaries on development and the world around us.
</subtitle><author><name>Patrick McVeety-Mill</name></author><entry><title type="html">Can A Linux Docker Swarm Run on Windows Hosts?</title><link href="http://loudandabrasive.com/can-a-linux-docker-swarm-run-on-windows-hosts" rel="alternate" type="text/html" title="Can A Linux Docker Swarm Run on Windows Hosts?" /><published>2021-06-15T14:42:00+00:00</published><updated>2021-06-15T14:42:00+00:00</updated><id>http://loudandabrasive.com/can-a-linux-docker-swarm-run-on-windows-hosts</id><content type="html" xml:base="http://loudandabrasive.com/can-a-linux-docker-swarm-run-on-windows-hosts">&lt;h2 id=&quot;tldr-not-yet-in-production&quot;&gt;TL,DR: Not Yet in Production&lt;/h2&gt;

&lt;p&gt;I am currently working on a failover orchestration for a small system of servers running a medium number of applications. Most of those, and their supporting infrastructures, are packaged and deployed using Docker. Container orchestration tools like Docker Swarm and Kubernetes have some righteous features like automatic internal DNS, service discovery, routing, and system-self-healing that make failing over when a host fails a breeze to set up. The only trick is, our hosts are &lt;em&gt;Windows&lt;/em&gt; servers (Windows 10 IoT to be specific) which aren’t particularly known for playing nice with Docker. Can we have it our way? Come with me on my journey to find out!&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;what-we-need&quot;&gt;What We Need&lt;/h2&gt;

&lt;p&gt;Let’s start by taking inventory: We have a more than a handful of Docker Linux containers, including applications built in-house by different teams, supporting third-party apps, as well as infrastructure like databases and queues. We have a handful Windows 10 machines we’re looking run them on, ideally joined together as &lt;a href=&quot;https://docs.docker.com/engine/swarm/&quot;&gt;Docker Swarm Mode&lt;/a&gt; “nodes” to get those nice features mentioned above.&lt;/p&gt;

&lt;p&gt;All together, that means we need these features in conjunction with each other:&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;multi-node swarm&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;windows hosts&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;linux containers&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rage-against-docker-machine&quot;&gt;Rage Against Docker Machine&lt;/h2&gt;

&lt;p&gt;To figure out if we can get all those features at the same time, we’ll start by going to the Docker docs. Here in the &lt;a href=&quot;https://docs.docker.com/engine/swarm/swarm-tutorial/#use-docker-desktop-for-mac-or-docker-desktop-for-windows&quot;&gt;Getting started&lt;/a&gt; tutorial, it looks like we can’t do multi-node on Windows without &lt;em&gt;docker machine&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Alternatively, install the latest Docker Desktop for Mac or Docker Desktop for Windows application on one computer. You can test both single-node and multi-node swarm from this computer, but you need to use Docker Machine to test the multi-node scenarios.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There’s not a whole lot of other information on the surface of how that works. We can find that &lt;a href=&quot;http://docs.docker.oeynet.com/machine/overview/&quot;&gt;Docker Machine&lt;/a&gt; is the cli tool for remote Docker management, either on cloud or local VMs or manually joining to hosts by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt;. A bit deeper in there’s a guide for the Swarm tutorial setup with &lt;a href=&quot;http://docs.docker.oeynet.com/machine/drivers/hyper-v/&quot;&gt;Docker Machine and Hyper-V&lt;/a&gt;. After combing through it all, we can conclude &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;machine&lt;/code&gt; allows us to remotely manage &lt;em&gt;Linux&lt;/em&gt; machines running the Docker Engine.&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;multi-node swarm&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;del&gt;windows hosts&lt;/del&gt; Windows hosts &lt;em&gt;calling Linux hosts&lt;/em&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;linux containers&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;docker-engine-on-windows-desktop&quot;&gt;Docker [Engine] on Windows [Desktop]&lt;/h2&gt;

&lt;p&gt;The documentation on Docker Machine included an interesting bit that had me wanting to learn more about Docker and Windows in general.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Machine was the only way to run Docker on Mac or Windows previous to Docker v1.12.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We know “Docker Desktop” is a bundle of cli tools, Kubernetes, and most importantly the &lt;em&gt;Docker Engine&lt;/em&gt; which is the critical piece for working with containers on the Docker daemon. If we check out the page for &lt;a href=&quot;https://docs.docker.com/engine/install/#server&quot;&gt;installing the Docker Engine&lt;/a&gt; the only operating systems listed under “Server” are Linux varieties. And yet somehow folks have hosted Windows containers, right? Searching for “docker windows server” can get us to the &lt;a href=&quot;https://www.docker.com/products/windows-containers&quot;&gt;Windows Containers product page&lt;/a&gt; and a little more digging in the docs can get us to installation instructions for &lt;a href=&quot;https://docker-docs.netlify.app/install/windows/docker-ee/&quot;&gt;Docker Engine Enterprise on Windows Server&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is where the documentation starts getting a little fuzzy. It doesn’t say anywhere explicitly that these are Windows containers, only, but they most likely are. We also see some references to “Docker for Windows” but all links are updated to redirect to the newer “Docker Desktop for Windows.” There’s also “Swarm” ambiguity in some Stack Overflow questions, blogs, and guides, between the new Swarm mode and &lt;a href=&quot;https://github.com/docker/classicswarm&quot;&gt;Swarm Classic&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A wider search of the internet yields a promising &lt;a href=&quot;https://www.youtube.com/watch?v=ZfMV5JmkWCY&quot;&gt;video series from Microsoft&lt;/a&gt; on how to run a Swarm of both Linux and Windows hosts and containers. There we can see that Docker Engine Enterprise can host Swarms on Windows Servers, but only Windows containers can run on the Windows nodes. Linux containers can be added to the Swarm, but require a Linux host to run on. Once again we come up short.&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;multi-node swarm&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;windows hosts&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;del&gt;linux containers&lt;/del&gt; only run on Linux nodes&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;coming-soon-to-a-windows-server-near-you&quot;&gt;Coming Soon(?) to a Windows Server Near You&lt;/h2&gt;

&lt;p&gt;That same wider search for “windows server linux containers” yields a &lt;a href=&quot;https://blog.eldernode.com/run-linux-containers-on-windows-server/&quot;&gt;couple&lt;/a&gt; &lt;a href=&quot;https://www.altaro.com/msp-dojo/linux-containers-windows-server-2019/&quot;&gt;tutorials&lt;/a&gt; on exactly what we’re looking for: running &lt;strong&gt;Linux&lt;/strong&gt; containers on &lt;strong&gt;Windows&lt;/strong&gt; server 2019, using Docker Enterprise which supports &lt;strong&gt;Swarm Mode&lt;/strong&gt;. Fantastic! However, the module is in preview.&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Install-Package&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Docker&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-ProviderName&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DockerProvider&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-RequiredVersion&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preview&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Software in preview often works great! But if you’re like me, you’d be nervous to use it in production. And unfortunately there’s no indication of when it will be ready for primetime. Even &lt;a href=&quot;https://mountainss.wordpress.com/2020/03/31/docker-linux-container-running-on-windows-server-2019-winserv-docker-containers/&quot;&gt;slightly newer articles&lt;/a&gt; include turning on experimental features within Docker. I guess we omitted an important implicit requirement from our list:&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;multi-node swarm&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;windows hosts&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;linux containers&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;production ready&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Maybe next time, friends. Till then, if you’re planning on using container orchestration, plan on hosting it in Linux!&lt;/p&gt;</content><author><name>Patrick McVeety-Mill</name></author><category term="DevOps" /><category term="docker" /><category term="swarm" /><category term="linux" /><category term="windows" /><summary type="html">TL,DR: Not Yet in Production I am currently working on a failover orchestration for a small system of servers running a medium number of applications. Most of those, and their supporting infrastructures, are packaged and deployed using Docker. Container orchestration tools like Docker Swarm and Kubernetes have some righteous features like automatic internal DNS, service discovery, routing, and system-self-healing that make failing over when a host fails a breeze to set up. The only trick is, our hosts are Windows servers (Windows 10 IoT to be specific) which aren’t particularly known for playing nice with Docker. Can we have it our way? Come with me on my journey to find out!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://loudandabrasive.com/assets/default-card-image.jpg" /><media:content medium="image" url="http://loudandabrasive.com/assets/default-card-image.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">An OK Use for Tuples in C#</title><link href="http://loudandabrasive.com/an-ok-use-for-tuples-in-csharp" rel="alternate" type="text/html" title="An OK Use for Tuples in C#" /><published>2021-04-15T15:12:00+00:00</published><updated>2021-04-15T15:12:00+00:00</updated><id>http://loudandabrasive.com/an-ok-use-for-tuples-in-csharp</id><content type="html" xml:base="http://loudandabrasive.com/an-ok-use-for-tuples-in-csharp">&lt;p&gt;Tuples get a bad rap in C#, mostly because until recently they were a pain to work with. As of C# 7, &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/value-tuples&quot;&gt;they are much nicer&lt;/a&gt;, but I am still missing the instinct to use them. Last night a friend was streaming work on a side-project using the &lt;a href=&quot;https://unity.com/&quot;&gt;Unity&lt;/a&gt; game engine. It’s been too long for me to provide any help with geometry, but we started talking about readability when I saw a nice opportuplety.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Specifically, my friend was working on a &lt;a href=&quot;https://en.wikipedia.org/wiki/Perlin_noise&quot;&gt;Perlin Noise&lt;/a&gt; generator, used to make sets of random-but-smoothed-and-normalized numbers. Pop those numbers onto a 3-D grid and add some conditional lighting or color effects and you can have an attractive, real-ish-looking mountain landscape with little effort. Unity makes generating Perlin Noise &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/Mathf.PerlinNoise.html&quot;&gt;very easy&lt;/a&gt; so the work is distributing the noise over the space, or map.&lt;/p&gt;

&lt;h2 id=&quot;expanding-signatures-elicit-confusion&quot;&gt;Expanding Signatures Elicit Confusion&lt;/h2&gt;

&lt;p&gt;We won’t worry about the algorithm itself, just the method signature for generating the map of values:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[,]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateNoiseMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After finishing the core generation, he added &lt;em&gt;origin&lt;/em&gt; values that shift the center of the noise. To make the arguments clearer he also renamed the map dimension params:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[,]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateNoiseMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This signature has  more potential to be confusing, especially if we give into temptation and shorten the names to save space and keystrokes:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[,]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateNoiseMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At least we’ve got &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scale&lt;/code&gt; to break up the two pairs on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt;s, but it’s all numbers, and if you’re not using an IDE that lists every argument name, or are like me and turned that off because it’s annoying, you’re likely to get them messed up:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;mapGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateNoiseMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// What are these values?!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;refactoring-to-tuples&quot;&gt;Refactoring to Tuples&lt;/h2&gt;

&lt;p&gt;That &lt;em&gt;Clean Code&lt;/em&gt; book or a object orienteer might tell us to make a new class to hold these params like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NoiseMapOptions&lt;/code&gt; or maybe a couple more potentially reusable ones like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MapDimensions2d&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OriginPoint&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Having a dedicated “parameter container class” has its place, but is best when something outside of code does the populating (like a web request or messaging framework). Here, we are only using them in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateNoiseMap&lt;/code&gt;, and calling it ourselves. Writing out parameter classes and then newing them up just to pass them in is too much work.&lt;/p&gt;

&lt;p&gt;Instead, we can tuple:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[,]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateNoiseMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dimensions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This signature isn’t any smaller, but our number pairs are now logically grouped. Those extra parentheses make it less likely to jumble values when calling the method. Even better, this might encourage using well-named tuples outside the method, instead of passing in variables or values.&lt;/p&gt;

&lt;h3 id=&quot;before&quot;&gt;Before:&lt;/h3&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originX&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mapGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateNoiseMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;after&quot;&gt;After:&lt;/h3&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dimensions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noiseOrigin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mapGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateNoiseMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dimensions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noiseOrigin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A solution like this may be a six egg omelet to half a dozen donuts -style preference, but refactoring away from many same-typed args is the important part. And we can always come back and refactor our tuples into types / classes if the need presents; for example if the caller of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mapGenerator.CreateNoiseMap()&lt;/code&gt; is &lt;em&gt;also&lt;/em&gt; passing around the map dimensions.&lt;/p&gt;

&lt;p&gt;So next time you’re about to create a parameter container for a method, or have two or three related variables, maybe consider a Tuple instead!&lt;/p&gt;</content><author><name>Patrick McVeety-Mill</name></author><category term="Development" /><category term="tuples" /><category term="c#" /><category term="types" /><summary type="html">Tuples get a bad rap in C#, mostly because until recently they were a pain to work with. As of C# 7, they are much nicer, but I am still missing the instinct to use them. Last night a friend was streaming work on a side-project using the Unity game engine. It’s been too long for me to provide any help with geometry, but we started talking about readability when I saw a nice opportuplety.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://loudandabrasive.com/assets/default-card-image.jpg" /><media:content medium="image" url="http://loudandabrasive.com/assets/default-card-image.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Reflections on Leading a Greenfield Project</title><link href="http://loudandabrasive.com/reflections-on-leading-a-greenfield-project" rel="alternate" type="text/html" title="Reflections on Leading a Greenfield Project" /><published>2021-02-01T21:22:00+00:00</published><updated>2021-02-01T21:22:00+00:00</updated><id>http://loudandabrasive.com/reflections-on-leading-a-greenfield-project</id><content type="html" xml:base="http://loudandabrasive.com/reflections-on-leading-a-greenfield-project">&lt;p&gt;Today is my first day ‘off’ after leading a development project for a bit more than a year. Besides being a pretty long time for consulting, this was unique in being the first &lt;em&gt;greenfield&lt;/em&gt; project I’ve tech-led. Overall it was a success, but as in all things, there were lots of lessons learned I am now reflecting on.&lt;/p&gt;

&lt;!--more--&gt;

&lt;blockquote&gt;
  &lt;p&gt;A &lt;a href=&quot;https://en.wikipedia.org/wiki/Greenfield_project#Software_development&quot;&gt;greenfield project&lt;/a&gt; is new development on a clean and to-be-defined slate, as compared to &lt;a href=&quot;https://en.wikipedia.org/wiki/Brownfield_(software_development)&quot;&gt;brownfield development&lt;/a&gt;: new development on existing or legacy software.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;time-and-opportunity&quot;&gt;Time and Opportunity&lt;/h2&gt;

&lt;p&gt;Being a tech lead requires &lt;a href=&quot;https://podcasts.apple.com/us/podcast/ep-7-perspectives-on-role-splitting-with-lola-mullen/id1498262181?i=1000493201497&quot;&gt;wearing many hats&lt;/a&gt; to meet the needs of any project. For greenfield, &lt;strong&gt;time management&lt;/strong&gt; is as-if-not-more important. There is a disastrous temptation (I fell prey to at times) to write more code yourself, scaffolding patterns or implementing important or preliminary features. For some teams, this may work out; and delegation is great, if not necessary, for ‘creating’ time for yourself. But no matter what, implementing a 🆒 feature or a key piece of infrastructure from top-to-bottom takes time and attention away from steering the ship and establishing the broader landscape of the new system.&lt;/p&gt;

&lt;p&gt;Besides an increased desire to do-it-yourself, there is a special risk of analysis paralysis when designing &lt;strong&gt;new&lt;/strong&gt; systems to requirements. A blank canvas &lt;em&gt;should&lt;/em&gt; be a boon: “Finally a chance to have it my way!” Science, though, says that &lt;a href=&quot;https://www.npr.org/2016/11/29/503594516/in-praise-of-mess-why-disorder-may-be-good-for-us&quot;&gt;constraints help with creativity&lt;/a&gt;, and existing architecture or widespread ugly patterns can make the path ahead more obvious compared to the near-infinite possibility of greenfield dev. Take the opportunity to explore, but time-box your spikes, and favor pragmatism over ideal perfection.&lt;/p&gt;

&lt;h2 id=&quot;team-guidance-guardrails&quot;&gt;Team, Guidance, Guardrails&lt;/h2&gt;

&lt;p&gt;Autonomy is critical for software developers, for morale, execution, and growth. However, totally unbridled developers are closer to wandering bears than a fluid herd of wild horses. Assuming your team shares your brain is an easy pitfall. Capable developers can replicate implementation patterns in an existing codebase, and more experienced devs may understand your designs without much direction, but many folks will need more guidance to start from new files and independently arrive at a single vibe for the codebase. &lt;a href=&quot;https://betterway.headspring.com/development-guidelines/&quot;&gt;Shared languages&lt;/a&gt; or &lt;a href=&quot;https://github.com/jbogard/ContosoUniversityDotNetCore-Pages&quot;&gt;pattern blueprints&lt;/a&gt; go a long way when you’re at step 0.&lt;/p&gt;

&lt;p&gt;Code reviews are a must, but for features that introduce new patterns, if you wait for the pull request to course-correct, it’s too late: You leave some &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Won't Fix&lt;/code&gt; comments (for yourself) and reluctantly click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Merge&lt;/code&gt; to the sound of the project manager’s tapping foot. The feature is functional, but hard to navigate should a bug arise, and if it gets copied a month later, is a new anti-pattern.&lt;/p&gt;

&lt;p&gt;I eventually moved beyond talking through the technical and business needs of a feature to including pseudocode sketches in ticket descriptions when I had a workable pattern in mind. You might also ask for a similar sketch before work gets too far, or do daily or mid-day check-ins to guide the &lt;em&gt;shape&lt;/em&gt; of new code. Be careful not to cross over into micro-management, though.&lt;/p&gt;

&lt;h2 id=&quot;communication-artifacts&quot;&gt;Communication Artifacts&lt;/h2&gt;

&lt;p&gt;When anyone leaves a project, there is a scramble to dump their unique head-knowledge into something more permanent. I was pleasantly surprised with the amount of documentation already written. Even outdated wiki pages were &lt;em&gt;mostly&lt;/em&gt; right, and it takes less time to make a correction or expand on a bullet than to write from scratch. Documenting-as-you-go is so valuable, sometimes I even left a comment on PRs: “MUST: Add a page documenting how to use this [new thing].”&lt;/p&gt;

&lt;p&gt;Besides the obvious how-tos and explainers, I left a long list of weak-spots, areas of improvement, and refactoring opportunities that were bouncing around my head and not &lt;em&gt;quite&lt;/em&gt; ready for a ticket. That list would have been valuable to share earlier, if only to allow the team to side-step falling into or digging those holes deeper.&lt;/p&gt;

&lt;p&gt;The colleague who took over for me asked a great question that I was less prepared for: “What are your unlabeled duties?” The team &lt;em&gt;saw me&lt;/em&gt; review code, add details to tickets, meet with clients, and coach them. There were also less visible tasks, regular or one-off, that I was responsible for. Here, my daily working notes became a good resource, but were only so detailed. I wracked my brain for a few tasks, but now that I’m gone we can only hope I remembered everything critical. Being explicit about role-duties is already important for setting clear expectations, but here going into extra detail would’ve been a confidence boost.&lt;/p&gt;

&lt;h2 id=&quot;parting-thoughts&quot;&gt;Parting Thoughts&lt;/h2&gt;

&lt;p&gt;There are lots of smaller, less helpful things to think: “I wish I had made the domain tighter,” “Wow those test helpers are a wreck,” “I could have documented the naming conventions, to help &lt;strong&gt;me&lt;/strong&gt; be consistent” My code review checklist grew exponentially over the course of the project, and in reflecting there are still things that slipped by me. But I take comfort that all these are small things, and for every little error or could’ve-been-better there is a much larger value to the end user and their doings.&lt;/p&gt;</content><author><name>Patrick McVeety-Mill</name></author><category term="Development" /><category term="commentary" /><category term="process" /><summary type="html">Today is my first day ‘off’ after leading a development project for a bit more than a year. Besides being a pretty long time for consulting, this was unique in being the first greenfield project I’ve tech-led. Overall it was a success, but as in all things, there were lots of lessons learned I am now reflecting on.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://loudandabrasive.com/assets/default-card-image.jpg" /><media:content medium="image" url="http://loudandabrasive.com/assets/default-card-image.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Updated Site Layout</title><link href="http://loudandabrasive.com/new-layout" rel="alternate" type="text/html" title="Updated Site Layout" /><published>2020-12-31T07:32:00+00:00</published><updated>2020-12-31T07:32:00+00:00</updated><id>http://loudandabrasive.com/new-layout</id><content type="html" xml:base="http://loudandabrasive.com/new-layout">&lt;p&gt;You may notice the site looks like a little different! It had been a minute since I had checked my styles, and it was high time for a refresh. This go around is a bit flashier, a bit more &lt;em&gt;timeless&lt;/em&gt;, and a bit more “me.” While restyling, I took the opportunity to brush up on Flexbox and shed the CSS library I was using. Besides visual touch ups, there’s been some restructuring:&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul&gt;
  &lt;li&gt;posts are now split by category between &lt;a class=&quot;vermilion&quot; href=&quot;/tech&quot;&gt;&lt;strong&gt;tech&lt;/strong&gt;&lt;/a&gt; and &lt;a class=&quot;orange&quot; href=&quot;/life&quot;&gt;&lt;strong&gt;life&lt;/strong&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;but still all mashed up in the homepage&lt;/em&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a class=&quot;citron&quot; href=&quot;/arts&quot;&gt;&lt;strong&gt;art pieces&lt;/strong&gt;&lt;/a&gt; are now posts, also by category
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;and also all mashed into the homepage&lt;/em&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;the &lt;strong&gt;projects&lt;/strong&gt; page is gone
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;but lives on in the commit history&lt;/em&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, all the posts live together in the homepage, or more organized in their respective category pages. In the coming months expect to see the typical technical posts be joined by more art postings, personal essays, and other bullshit. Thanks for reading.&lt;/p&gt;

&lt;p&gt;See you soon,
&lt;br /&gt;&lt;span style=&quot;font: oblique 1.75em 'Vibur', sans-serif&quot;&gt;Patrick&lt;/span&gt;&lt;/p&gt;</content><author><name>Patrick McVeety-Mill</name></author><category term="Announcement" /><summary type="html">You may notice the site looks like a little different! It had been a minute since I had checked my styles, and it was high time for a refresh. This go around is a bit flashier, a bit more timeless, and a bit more “me.” While restyling, I took the opportunity to brush up on Flexbox and shed the CSS library I was using. Besides visual touch ups, there’s been some restructuring:</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://loudandabrasive.com/assets/default-card-image.jpg" /><media:content medium="image" url="http://loudandabrasive.com/assets/default-card-image.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Securing Cloud Infrastructure with Azure Managed Identities</title><link href="http://loudandabrasive.com/securing-cloud-infrastructure-with-azure-managed-identities" rel="alternate" type="text/html" title="Securing Cloud Infrastructure with Azure Managed Identities" /><published>2020-09-22T15:48:00+00:00</published><updated>2020-09-22T15:48:00+00:00</updated><id>http://loudandabrasive.com/securing-cloud-infrastructure-with-azure-managed-identities</id><content type="html" xml:base="http://loudandabrasive.com/securing-cloud-infrastructure-with-azure-managed-identities">&lt;p&gt;Of the Azure features I’ve becomes more acquainted with these past couple years, &lt;strong&gt;Managed Identities&lt;/strong&gt; are one of my favorites. Managed Identities are system-managed service principals that allow for a level of security control I hadn’t considered before, where keys and passwords can be ‘eliminated’ or rotated so frequently that &lt;strong&gt;no human&lt;/strong&gt; has (at-ready) access to resources, without requiring (even automated) code or configuration changes for applications. They are &lt;em&gt;super&lt;/em&gt; easy to set up in .NET Core, and I recently layed out how for Headspring’s “Developer Corner”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://headspring.com/2020/09/22/better-than-passwords-securing-cloud-infrastructure-with-azure-managed-identities/&quot;&gt;Read the whole article at Headspring.com&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&quot;https://github.com/pmcvtm/azureference-app&quot;&gt;Check out the sample app on Github&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</content><author><name>Patrick McVeety-Mill</name></author><category term="Cloud" /><category term="azure" /><category term="security" /><category term="devops" /><summary type="html">Of the Azure features I’ve becomes more acquainted with these past couple years, Managed Identities are one of my favorites. Managed Identities are system-managed service principals that allow for a level of security control I hadn’t considered before, where keys and passwords can be ‘eliminated’ or rotated so frequently that no human has (at-ready) access to resources, without requiring (even automated) code or configuration changes for applications. They are super easy to set up in .NET Core, and I recently layed out how for Headspring’s “Developer Corner” Read the whole article at Headspring.com and Check out the sample app on Github</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://loudandabrasive.com/assets/default-card-image.jpg" /><media:content medium="image" url="http://loudandabrasive.com/assets/default-card-image.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Presenting: OK Human</title><link href="http://loudandabrasive.com/presenting-ok-human" rel="alternate" type="text/html" title="Presenting: OK Human" /><published>2019-12-17T07:32:00+00:00</published><updated>2019-12-17T07:32:00+00:00</updated><id>http://loudandabrasive.com/presenting-ok-human</id><content type="html" xml:base="http://loudandabrasive.com/presenting-ok-human">&lt;p&gt;I am very happy to announce that I am the host of Headspring’s new podcast &lt;em&gt;OK Human&lt;/em&gt;, an exploration of technology, developing, and consulting through the lenses of humanity and emotion. Look forward to discussions on work strategy, organization, empathy, and how change can impact us as people while we make (or support making) software.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;You can catch the first episode, featuring coworker and pal &lt;a href=&quot;https://twitter.com/yaradhye&quot;&gt;Yogi Aradhye&lt;/a&gt; talking with me about “Developer Empathy” in the grand scheme on &lt;a href=&quot;https://headspring.com/insights/podcast/&quot;&gt;headspring.com/podcast/&lt;/a&gt;, along with all future episodes. You can also listen with this link, pop it into your favorite app, or subscribe to the RSS feed from this widget:&lt;/p&gt;

&lt;iframe src=&quot;https://www.buzzsprout.com/844789/2612749-ep-1-developer-empathy-with-yogi-aradhye?client_source=small_player&amp;amp;iframe=true&amp;amp;referrer=https://www.buzzsprout.com/844789/2612749-ep-1-developer-empathy-with-yogi-aradhye.js?container_id=buzzsprout-player-2612749&amp;amp;player=small&quot; scrolling=&quot;no&quot; title=&quot;OK Human, Ep. 1: Developer Empathy with Yogi Aradhye&quot; width=&quot;100%&quot; height=&quot;200&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Be sure to like, subscribe, and review OK Human on whatever platform you get podcasts.&lt;/p&gt;

&lt;p&gt;See you soon,
&lt;br /&gt;&lt;span style=&quot;font: oblique 1.75em 'Vibur', sans-serif&quot;&gt;Patrick&lt;/span&gt;&lt;/p&gt;</content><author><name>Patrick McVeety-Mill</name></author><category term="Announcement" /><summary type="html">I am very happy to announce that I am the host of Headspring’s new podcast OK Human, an exploration of technology, developing, and consulting through the lenses of humanity and emotion. Look forward to discussions on work strategy, organization, empathy, and how change can impact us as people while we make (or support making) software.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://loudandabrasive.com/assets/default-card-image.jpg" /><media:content medium="image" url="http://loudandabrasive.com/assets/default-card-image.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Database Migrations For Azure SQL Elastic Pools Using RoundhousE</title><link href="http://loudandabrasive.com/roundhouse-db-migrations-azure-elastic-pools" rel="alternate" type="text/html" title="Database Migrations For Azure SQL Elastic Pools Using RoundhousE" /><published>2019-10-15T09:24:00+00:00</published><updated>2019-10-15T09:24:00+00:00</updated><id>http://loudandabrasive.com/roundhouse-db-migrations-azure-elastic-pools</id><content type="html" xml:base="http://loudandabrasive.com/roundhouse-db-migrations-azure-elastic-pools">&lt;p&gt;Databases are important for most applications, but keeping their schemas consistent across versions and environments can become a sticky date pudding without proper care. Tools like &lt;a href=&quot;https://github.com/chucknorris/roundhouse&quot;&gt;RoundhousE&lt;/a&gt; provide streamlined, repeatable, script-based migrations and work like a charm out of the box. If using the very cool and atmospheric &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/sql-database/sql-database-elastic-pool&quot;&gt;Azure SQL Elastic Pools&lt;/a&gt;, however, the default behavior lands us adjacent to the pool, not in it. Let’s not be hasty to abandon database host nor migrator; it’s easy to correct this with little configuration. &lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;not-the-desired-databases&quot;&gt;Not The Desired Databases&lt;/h2&gt;

&lt;p&gt;RoundhousE is kind to its users and &lt;a href=&quot;https://github.com/chucknorris/roundhouse/wiki/CustomCreateDatabase&quot;&gt;creates databases if they do not exist&lt;/a&gt; at the start of a migration. When working with Azure SQL, this creates a &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/sql-database/sql-database-single-database&quot;&gt;single database&lt;/a&gt; on the connected &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/sql-database/sql-database-servers&quot;&gt;database server&lt;/a&gt;. That certainly fits as expected behavior, but if you’ve provisioned an elastic pool on your Azure SQL Server, you’ll find it sadly empty after a first-time migration.&lt;/p&gt;

&lt;p&gt;Databases can be pushed into the pool (not recommended for physical servers) after the fact from the Azure Portal or CLI, but I’m lazy and would prefer RoundhousE to carry me the whole way through.&lt;/p&gt;

&lt;h2 id=&quot;custom-database-create&quot;&gt;Custom Database Create&lt;/h2&gt;

&lt;p&gt;RoundhousE is as easy to customize as it is to use unconfigured, and provides a flag for overriding the default create database behavior in favor of a  &lt;a href=&quot;https://github.com/chucknorris/roundhouse/wiki/CustomCreateDatabase&quot;&gt;custom script&lt;/a&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-cds&lt;/code&gt;). This script can then leverage the &lt;a href=&quot;https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-database-service-objectives-azure-sql-database&quot;&gt;T-SQL instruction&lt;/a&gt; for &lt;em&gt;where&lt;/em&gt; to create an Azure SQL database: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SERVICE_OBJECTIVE&lt;/code&gt;. We can adapt RoundhousE’s &lt;a href=&quot;https://github.com/chucknorris/roundhouse/blob/master/product/roundhouse.databases.sqlserver/SqlServerDatabase.cs#L108-L115&quot;&gt;sample custom create script&lt;/a&gt; to set both the service objective and the elastic pool’s name:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;USE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;master&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Created&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bit&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Created&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;databases&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Created&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DATABASE&lt;/span&gt; 
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SERVICE_OBJECTIVE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ELASTIC_POOL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;REPLACE_ELASTIC_POOL_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Created&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At runtime, RoundhousE will connect as normal, but will run the above before any migration scripts. The ` {{DatabaseName}} ` token will be filled in automatically, but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#REPLACE_ELASTIC_POOL_NAME#&lt;/code&gt; will need to be hard-coded, or better yet plugged by some other process.&lt;/p&gt;

&lt;h2 id=&quot;using-in-a-cicd-pipeline&quot;&gt;Using in a CI/CD Pipeline&lt;/h2&gt;

&lt;p&gt;That works fine for a single elastic pool, but hard-coding names is brittle and may not work across environments. We give the script a little nudge; personally, I use powershell to plug in the elastic pool name from an environment variable, before calling RoundhousE:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$replacedContent&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get-Content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$createDbScript&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-replace&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#REPLACE_ELASTIC_POOL_NAME#'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ElasticPoolName&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set-Content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$createDbScript&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Value&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$replacedContent&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$roundhouse_exe_path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MyConnectionString&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./scripts/&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-cds&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$createDbScript&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--env&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--vf&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyApp.dll&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you use other kinds of SQL hosts besides elastic pools, you can set a flag to only conditionally use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-cds&lt;/code&gt; option, or if you prefer writing SQL, knock yourself out on the create script.&lt;/p&gt;

&lt;p&gt;Whether or not you need to get fancy, it’s important to noodle around with our tools in the face of odd behavior, especially if it allows us to use more ideal technologies.&lt;/p&gt;</content><author><name>Patrick McVeety-Mill</name></author><category term="Cloud" /><category term="azure" /><category term="sql" /><category term="roundhouse" /><summary type="html">Databases are important for most applications, but keeping their schemas consistent across versions and environments can become a sticky date pudding without proper care. Tools like RoundhousE provide streamlined, repeatable, script-based migrations and work like a charm out of the box. If using the very cool and atmospheric Azure SQL Elastic Pools, however, the default behavior lands us adjacent to the pool, not in it. Let’s not be hasty to abandon database host nor migrator; it’s easy to correct this with little configuration.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://loudandabrasive.com/assets/default-card-image.jpg" /><media:content medium="image" url="http://loudandabrasive.com/assets/default-card-image.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Crested Bunting</title><link href="http://loudandabrasive.com/crested-bunting" rel="alternate" type="text/html" title="Crested Bunting" /><published>2019-07-08T18:38:00+00:00</published><updated>2019-07-08T18:38:00+00:00</updated><id>http://loudandabrasive.com/crested-bunting</id><content type="html" xml:base="http://loudandabrasive.com/crested-bunting">&lt;p&gt;&lt;img src=&quot;https://live.staticflickr.com/65535/50775498983_458cfde401_k.jpg&quot; alt=&quot;Sculpture of a crested bird made of black and brown cardboard&quot; /&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;This Himalayan bird was made from a box of Shiner Black lager and a bag from Cavendar’s Boot city. A bit more detail in this one than any of the birds before it, and the first plumage-heavy crest, too. This was made for a charity auction at work.&lt;/p&gt;

&lt;p&gt;📷 Photos taken by &lt;a href=&quot;https://hollymarie.photo/&quot;&gt;Holly Marie Photography&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://live.staticflickr.com/65535/50776256311_7a38311777_k.jpg&quot; alt=&quot;Rear view of the same sculpture&quot; /&gt;
&lt;img src=&quot;https://live.staticflickr.com/65535/50775499143_c3d13d338b_k.jpg&quot; alt=&quot;Detail of the same sculpture&quot; /&gt;&lt;/p&gt;</content><author><name>Patrick McVeety-Mill</name></author><category term="Cardboard" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://loudandabrasive.com/assets/default-card-image.jpg" /><media:content medium="image" url="http://loudandabrasive.com/assets/default-card-image.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Deploying Multiple WebJobs in Azure DevOps</title><link href="http://loudandabrasive.com/deploying-webjobs-in-azure-devops" rel="alternate" type="text/html" title="Deploying Multiple WebJobs in Azure DevOps" /><published>2019-06-20T22:02:00+00:00</published><updated>2019-06-20T22:02:00+00:00</updated><id>http://loudandabrasive.com/deploying-webjobs-in-azure-devops</id><content type="html" xml:base="http://loudandabrasive.com/deploying-webjobs-in-azure-devops">&lt;p&gt;Unsurprisingly, &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/app-service/&quot;&gt;App Services&lt;/a&gt; are one of Azure’s more useful and persistent offerings. Somewhat surprising (to me at least) is that &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/app-service/webjobs-create&quot;&gt;WebJobs&lt;/a&gt; stand firmly beside them, after seeming like a tack-on, albeit a cool one. The way they are developed has evolved, however, now leveraging the &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/app-service/webjobs-sdk-how-to&quot;&gt;same SDK that Azure Functions is built on&lt;/a&gt;. From a user’s perspective, WebJobs’ deploy-and-run-time is conversely unchanged. Unfortunately, that means deploying them is primarily advertised as a manual process from Visual Studio, the Azure Portal, or using Powershell. We know better, though, and can integrate WebJobs with our App Services in &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/&quot;&gt;Azure DevOps Pipelines&lt;/a&gt;, even if we’re straying from the happy path.&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;single-job-per-project&quot;&gt;Single Job per Project&lt;/h2&gt;

&lt;p&gt;The preferred and straightforward way of developing and deploying WebJobs is &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/app-service/webjobs-dotnet-deploy-vs&quot;&gt;&lt;em&gt;very&lt;/em&gt; straightforward&lt;/a&gt;, but comes with some stipulations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;WebJobs are built alongside a web app&lt;/li&gt;
  &lt;li&gt;WebJobs are C# console app projects&lt;/li&gt;
  &lt;li&gt;WebJobs are 1:1 project-to-job&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Put differently: while you can have as many WebJobs as you like, each must be distinct, and its own console app project. The solution with the jobs also contains a web app project that will be built and released with them. If this fits your needs, CONGRATULATIONS; simply add the &lt;a href=&quot;https://www.nuget.org/packages/Microsoft.Web.WebJobs.Publish/&quot;&gt;Microsoft.Web.WebJobs.Publish&lt;/a&gt; Nuget package to each console app, and include a simple &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/app-service/webjobs-dotnet-deploy-vs#publishsettings&quot;&gt;JSON file&lt;/a&gt; that details the job’s settings. That’s it! Your WebJobs will be published with the web app and run when you deploy to App Services.&lt;/p&gt;

&lt;h2 id=&quot;multiple-jobs-for-the-same-project&quot;&gt;Multiple Jobs for the Same Project&lt;/h2&gt;

&lt;p&gt;Running multiple instances of a WebJob can be effective for replicating a process over different data sources, running on different schedules, or even to scale without &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/app-service/overview-hosting-plans&quot;&gt;paying for more VMs&lt;/a&gt;. While it seems &lt;em&gt;easiest&lt;/em&gt; to do this by uploading .zip files and configuring through the Azure Portal, we value repeatability and parity between the jobs. Thankfully, we have a way. WebJobs’ aforementioned unchanged under-the-hood is &lt;a href=&quot;https://github.com/projectkudu/kudu/wiki/WebJobs&quot;&gt;Project Kudu&lt;/a&gt;: the Swiss Army knife &lt;strong&gt;K&lt;/strong&gt; from the App Service &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Advanced Tools&lt;/code&gt; menu in the Azure Portal. Among lots of nit-grit in the documentation is this non-obvious detail about how WebJobs run:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Jobs are deployed by copying them to the right place in the file-system…&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;To deploy a triggered job copy your binaries to: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d:\home\site\wwwroot\app_data\jobs\triggered\{job name}&lt;/code&gt;
To deploy a continuous job copy your binaries to: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d:\home\site\wwwroot\app_data\jobs\continuous\{job name}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Microsoft.Web.WebJobs.Publish&lt;/code&gt; package includes the magic instructions to publish jobs to these folders, but we can do this manually using a powershell and a couple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$env&lt;/code&gt; variables in our Pipeline:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$WEBJOB_PUBLISH_PATH&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# pipeline variable: location of published or extracted console app artifact&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$APP_SERVICE_ROOT&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# pipeline variable: location to stage the whole app service for deployment&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$KUDU_MAGIC_PATH&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$APP_SERVICE_ROOT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/app_data/jobs/continuous&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# or /triggered&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Copy-WebJobRuntime&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$webjobName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Copy-Item&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$WEBJOB_PUBLISH_PATH&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Destination&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$KUDU_MAGIC_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$webjobName&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Recurse&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Copy-WebJobRuntime&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my-webjob-1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Copy-WebJobRuntime&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my-webjob-2&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After copying the jobs into their magic folders, we can deploy the application in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$AppServiceRoot&lt;/code&gt; either with &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/deploy/azure-rm-web-app-deployment&quot;&gt;the pipeline deploy task&lt;/a&gt; or more powershell. The Webjobs will go with it, appearing in the Azure Portal or Kudu Advanced Tools as if we had deployed any other way.&lt;/p&gt;

&lt;h3 id=&quot;configuring-individual-jobs&quot;&gt;Configuring Individual Jobs&lt;/h3&gt;

&lt;p&gt;App configuration can throw a wrench into our process when we have different WebJobs to deploy. Settings set at the App Service level will apply to &lt;em&gt;all&lt;/em&gt; jobs. This becomes problematic for the replicated-job-per-data-source use case, among others. The solution is to change the individual app settings &lt;strong&gt;files&lt;/strong&gt;, which remain unique so long as they aren’t overridden by the App Service:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ConfigureWebjob-Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$webjobName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$queueName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$webjob_settings_path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Join-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$KUDU_MAGIC_PATH&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$webjobName&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./appsettings.json'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#this is PS6, use [IO.Path]::Combine if you're old school&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$webjob_settings&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get-Content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$webjob_settings_path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConvertFrom-Json&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Write-Host&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Configuring &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$webjob_name&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; to watch &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$queueName&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$webjob_settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;QueueToWatch&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$queueName&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$webjob_settings&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConvertTo-Json&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set-Content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$webjob_settings_path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConfigureWebjob-Queue&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my-webjob-1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;queue1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConfigureWebjob-Queue&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my-webjob-2&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;queue2&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, we assume the only difference between the jobs is which queue they monitor. This method gets complex with more settings, or increased variability between jobs. Thankfully, app settings consistent across WebJobs can be set on the App Service like normal. Using a prefix-based naming convention with pipeline variables and WebJob names can also ease pain and reduce the amount of hard-code in the deploy step. See my &lt;a href=&quot;/configuring-docker-with-env-files-written-from-azdo-variables&quot;&gt;post on .env files with pipelines variables&lt;/a&gt;) for such an approach for varying docker containers. With the right conventions it’s possible to even dynamically create all WebJobs from an array of names configured in the pipeline.&lt;/p&gt;

&lt;h2 id=&quot;look-before-you-leap&quot;&gt;Look Before You Leap&lt;/h2&gt;

&lt;p&gt;Before running down the “Multiple Jobs” path, consider if &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/functions-compare-logic-apps-ms-flow-webjobs&quot;&gt;WebJobs are really right choice&lt;/a&gt; for the problem you’re solving. Just because powershell and Azure Pipelines afford us the ability to configure Webjobs in ths way doesn’t mean it’s ideal. In fact, in many cases I’d say it’s &lt;em&gt;not&lt;/em&gt;. Even so, whether you’re running one or one hundred Webjobs, it’s hard to argue against repeatable machine-driven processes. Ditch the manual portal upload and get automated!&lt;/p&gt;</content><author><name>Patrick McVeety-Mill</name></author><category term="Cloud" /><category term="azure-dev-ops" /><category term="azure" /><category term="webjobs" /><category term="powershell" /><summary type="html">Unsurprisingly, App Services are one of Azure’s more useful and persistent offerings. Somewhat surprising (to me at least) is that WebJobs stand firmly beside them, after seeming like a tack-on, albeit a cool one. The way they are developed has evolved, however, now leveraging the same SDK that Azure Functions is built on. From a user’s perspective, WebJobs’ deploy-and-run-time is conversely unchanged. Unfortunately, that means deploying them is primarily advertised as a manual process from Visual Studio, the Azure Portal, or using Powershell. We know better, though, and can integrate WebJobs with our App Services in Azure DevOps Pipelines, even if we’re straying from the happy path.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://loudandabrasive.com/assets/default-card-image.jpg" /><media:content medium="image" url="http://loudandabrasive.com/assets/default-card-image.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Configuring Docker with Env Files Written from Azure DevOps Variables</title><link href="http://loudandabrasive.com/configuring-docker-with-env-files-written-from-azdo-variables" rel="alternate" type="text/html" title="Configuring Docker with Env Files Written from Azure DevOps Variables" /><published>2019-03-26T19:53:00+00:00</published><updated>2019-03-26T19:53:00+00:00</updated><id>http://loudandabrasive.com/configuring-docker-with-env-files-written-from-azdo-variables</id><content type="html" xml:base="http://loudandabrasive.com/configuring-docker-with-env-files-written-from-azdo-variables">&lt;p&gt;I’ve become a big fan of &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/&quot;&gt;Azure DevOps Pipelines&lt;/a&gt;. It’s a powerful and robust tool that enables really slick automated build and release processes. I wrote last about &lt;a href=&quot;/effective-nuget-versioning-in-azure-devops&quot;&gt;sexy auto-semversioning Nuget libraries&lt;/a&gt; using Build Pipelines. I’m still no expert in AzDO but am continuing to extend and improve the ways we leverage it. Recently I found a way to optimize against one of release pipelines’ biggest annoyances: app configuration for “non-transformable” config formats such as environment variables for Docker containers. &lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Deploy tools like Azure DevOps Pipelines or &lt;a href=&quot;https://octopus.com/&quot;&gt;Octopus Deploy&lt;/a&gt; allow setting environment- and process- scoped variables to be plugged into an application as it’s deployed. This can be a huge boon: it keeps secrets out of source control, enables sharing config values where convenient, and creates a single source-of-truth for the configuration of released applications. Often, the properly scoped variables are plugged in via file transforms or the a hosting platform automatically. By “non-transformable” config formats, I mean ones the toolset does not update in this fashion.&lt;/p&gt;

&lt;p&gt;For our system, this comes up most with “vanilla” Docker containers running on a VM: no Kubernetes, no cloud container instances, not even &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose&lt;/code&gt;, despite how these might ease orchestration. This is straightforward to set up in a release pipeline, either with the built-in &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/Docker?view=azure-devops#run-command&quot;&gt;Docker task&lt;/a&gt; or, in our case, calling the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker&lt;/code&gt; cli explicitly. We do this via a powershell script to enable looping to “scale” to a configured number of containers during a release. The following configuration technique became an obvious fit for this low-orchestration script or the built-in Docker task, however you may find it useful even with Kubernetes, Docker Swarm, or docker-compose’d services. Likewise, it can apply to other configuration formats that don’t fit into a tool’s “magic update” paradigm.&lt;/p&gt;

&lt;h2 id=&quot;more-work-more-problems&quot;&gt;More Work More Problems&lt;/h2&gt;

&lt;p&gt;For Docker, there are &lt;a href=&quot;https://docs.Docker.com/engine/reference/commandline/run/#set-environment-variables--e---env---env-file&quot;&gt;a few options&lt;/a&gt; for passing configuration to a container at runtime, specifically as environment variables, which are then &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.configuration.environmentvariablesextensions.addenvironmentvariables?view=aspnetcore-2.2&quot;&gt;scooped up by the application&lt;/a&gt; at startup. Settings could also be transformed on a config file directly at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker build&lt;/code&gt;-time, but this eliminates the visibility into what is set with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker inspect&lt;/code&gt; or a similar tool. Unfortunately, none of these methods fit particularly well with Azure DevOps’s release pipeline variables.&lt;/p&gt;

&lt;p&gt;Initially, we opted to set variables that needed updating individually in our script with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-e&lt;/code&gt; (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--env&lt;/code&gt;) flag:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;docker&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;80:5000&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;my.api&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;`
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ConnectionStrings__AzureStorage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ConnectionStrings__AzureStorage&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serilog__Properties__Environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Serilog__Properties__Environment&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;myregistry/my.api:2.11.2&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This was fine for one or two variables, but it got out of hand as the variable changed and grew. Besides setting the variables in the app and pipeline, each addition or removal required an update to the pipeline’s step(s), or a code change if the script was committed to the repository. As a lazy and typo-prone developer myself, this was totally unsustainable.&lt;/p&gt;

&lt;h2 id=&quot;paring-to-prefixes&quot;&gt;Paring to Prefixes&lt;/h2&gt;

&lt;p&gt;Now, instead of having the variable written in so many places, we leverage the list of all variables to our benefit. During an Azure DevOps Pipeline release, all scoped custom and built-in variables become environment variables on the agent. This is logged during the “Initialize job” step (some omitted for brevity):&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;Environment variables available are below.  Note that these environment variables can be referred to in the task (in the ReleaseDefinition) by replacing &quot;_&quot; with &quot;.&quot; e.g. AGENT_NAME environment variable can be referenced using Agent.Name in the ReleaseDefinition:
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;        [AGENT_DEPLOYMENTGROUPID] --&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;84]
&lt;span class=&quot;gp&quot;&gt;        [AGENT_HOMEDIRECTORY] --&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;/home/myteam/azagent/azagent]
&lt;span class=&quot;gp&quot;&gt;        [AGENT_OS] --&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Linux]
&lt;span class=&quot;gp&quot;&gt;        [AGENT_VERSION] --&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2.148.1]
&lt;span class=&quot;gp&quot;&gt;        [API_AUTHENTICATION__ENABLED] --&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;        [API_AUTHENTICATION__PASSWORD] --&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;AxjnxkekzDcaW8lwgKz/W8jdKXl68yUl/ATGqxOeeEs&lt;span class=&quot;o&quot;&gt;=]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The last two in this list, prefixed with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;API_&lt;/code&gt;, are &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/release/variables#custom-variables&quot;&gt;custom variables set in the pipeline&lt;/a&gt;. The prefix in the key is important, as it allows separation of custom variables from Azure DevOps’s built-in ones. In powershell, given all environment variables &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;env:*&lt;/code&gt; and a relevant &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$prefix&lt;/code&gt;, we can extract only those we’ve deemed to be set on the application config and write them to a file as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KEY=VALUE&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$myEnvironmentFilePath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# find, create, or clean file&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;ForEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get-ChildItem&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;StartsWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Substring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add-Content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$myEnvironmentFilePath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;getting-fancy&quot;&gt;Getting Fancy&lt;/h3&gt;

&lt;p&gt;If a pipeline relates to more than one application (or container), it’s possible to iterate over a set of prefixes, including a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHARED_&lt;/code&gt; one that all apps should pull in. Prefixes can be used to represent other scopes like machine kind, or release purpose, enabling a level of configuration specificity beyond just environment. It may serve to set the list of prefixes themselves as a pipeline variable that you can update at release-time to change config for special cases.&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#env:PREFIXES = API_,SHARED_,LOAD_TEST_&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prefixes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PREFIXES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;ForEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get-ChildItem&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$matchedPrefix&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;ForEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prefix&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prefixes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;StartsWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$matchedPrefix&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$matchedPrefix&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-ne&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#continue as above...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once the file has been fully written, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker run&lt;/code&gt; call changes from listing all variables with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-e&lt;/code&gt; to the much more concise &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--env-file&lt;/code&gt;. If the call is in the same script as the config creation (or set as another pipeline variable), we can avoid hard-coding the environment file path:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;docker&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;80:5000&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;my.api&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--env-file&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$myEnvironmentFilePath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;myregistry/my.api:2.11.2&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;other-applications&quot;&gt;Other Applications&lt;/h2&gt;

&lt;p&gt;Besides Docker &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.env&lt;/code&gt; files, this method of iteration and prefixed extraction can be applied to plugging values into placeholders in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ini&lt;/code&gt; files, adding rows to an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.xml&lt;/code&gt; config, or changing up a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json&lt;/code&gt; object. Before getting out your big paintbrush, though, communicate with your team and agree on a standard for applying these. Save a baseline as a reference Task Group, or a shared script in a repository, and document it. As in software development, patterns are only useful when they’re followed, and should be scrutinized as they are applied to new situations.&lt;/p&gt;</content><author><name>Patrick McVeety-Mill</name></author><category term="DevOps" /><category term="azure-dev-ops" /><category term="docker" /><category term="configuration" /><category term="powershell" /><summary type="html">I’ve become a big fan of Azure DevOps Pipelines. It’s a powerful and robust tool that enables really slick automated build and release processes. I wrote last about sexy auto-semversioning Nuget libraries using Build Pipelines. I’m still no expert in AzDO but am continuing to extend and improve the ways we leverage it. Recently I found a way to optimize against one of release pipelines’ biggest annoyances: app configuration for “non-transformable” config formats such as environment variables for Docker containers.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://loudandabrasive.com/assets/default-card-image.jpg" /><media:content medium="image" url="http://loudandabrasive.com/assets/default-card-image.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>